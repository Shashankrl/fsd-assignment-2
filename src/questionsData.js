const questionsData = [
  {
    id: 1,
    question: "Explain the Props and State in React with examples.",
    answer: "Props (short for properties) are used to pass data from a parent component to a child component. They are read-only and cannot be modified by the child component. State is used to manage data within a component that can change over time.\n\nExample of Props:\n```jsx\n// Parent component\nfunction ParentComponent() {\n  return <ChildComponent name=\"John\" age={25} />;\n}\n\n// Child component\nfunction ChildComponent(props) {\n  return (\n    <div>\n      <p>Name: {props.name}</p>\n      <p>Age: {props.age}</p>\n    </div>\n  );\n}\n```\n\nExample of State:\n```jsx\nfunction Counter() {\n  // useState hook to create state\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n```"
  },
  {
    id: 2,
    question: "What is the use of React Hooks like useState and useEffect? Explain with simple examples.",
    answer: "React Hooks are functions that let you use state and other React features without writing a class component. The useState hook allows functional components to have state, while useEffect allows performing side effects in functional components.\n\nExample of useState:\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\nExample of useEffect:\n```jsx\nfunction DataFetcher() {\n  const [data, setData] = useState(null);\n  \n  useEffect(() => {\n    // This runs after the component mounts\n    fetch('https://api.example.com/data')\n      .then(response => response.json())\n      .then(data => setData(data));\n      \n    // Optional cleanup function\n    return () => {\n      // This runs when the component unmounts\n      console.log('Component unmounted');\n    };\n  }, []); // Empty dependency array means this effect runs once\n  \n  return (\n    <div>\n      {data ? <p>Data: {JSON.stringify(data)}</p> : <p>Loading...</p>}\n    </div>\n  );\n}\n```"
  },
  {
    id: 3,
    question: "Describe Conditional Rendering in React. What are the different ways to implement it?",
    answer: "Conditional rendering in React allows you to render different components or elements based on certain conditions. There are several ways to implement conditional rendering:\n\n1. Using if/else statements:\n```jsx\nfunction Greeting({ isLoggedIn }) {\n  if (isLoggedIn) {\n    return <UserGreeting />;\n  }\n  return <GuestGreeting />;\n}\n```\n\n2. Using the ternary operator:\n```jsx\nfunction Greeting({ isLoggedIn }) {\n  return (\n    <div>\n      {isLoggedIn ? <UserGreeting /> : <GuestGreeting />}\n    </div>\n  );\n}\n```\n\n3. Using logical && operator:\n```jsx\nfunction Mailbox({ unreadMessages }) {\n  return (\n    <div>\n      <h1>Hello!</h1>\n      {unreadMessages.length > 0 && \n        <h2>You have {unreadMessages.length} unread messages.</h2>\n      }\n    </div>\n  );\n}\n```\n\n4. Using switch statements:\n```jsx\nfunction StatusMessage({ status }) {\n  switch(status) {\n    case 'loading':\n      return <LoadingMessage />;\n    case 'success':\n      return <SuccessMessage />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      return null;\n  }\n}\n```"
  },
  {
    id: 4,
    question: "Create a React functional component called Student that receives name and grade as props and displays them.",
    answer: "```jsx\nimport React from 'react';\n\nfunction Student(props) {\n  return (\n    <div className=\"student-card\">\n      <h2>Student Information</h2>\n      <p><strong>Name:</strong> {props.name}</p>\n      <p><strong>Grade:</strong> {props.grade}</p>\n    </div>\n  );\n}\n\n// Usage example\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Student name=\"John Doe\" grade=\"A\" />\n      <Student name=\"Jane Smith\" grade=\"B+\" />\n    </div>\n  );\n}\n\nexport default Student;\n```"
  },
  {
    id: 5,
    question: "Build a simple voting application with three candidates using components and useState. Only one vote should be allowed per user.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction VotingApp() {\n  const [candidates, setCandidates] = useState([\n    { id: 1, name: 'Candidate A', votes: 0 },\n    { id: 2, name: 'Candidate B', votes: 0 },\n    { id: 3, name: 'Candidate C', votes: 0 }\n  ]);\n  \n  const [hasVoted, setHasVoted] = useState(false);\n  \n  const handleVote = (candidateId) => {\n    if (!hasVoted) {\n      setCandidates(candidates.map(candidate => \n        candidate.id === candidateId \n          ? { ...candidate, votes: candidate.votes + 1 } \n          : candidate\n      ));\n      setHasVoted(true);\n    }\n  };\n  \n  return (\n    <div className=\"voting-app\">\n      <h1>Voting Application</h1>\n      \n      {candidates.map(candidate => (\n        <div key={candidate.id} className=\"candidate\">\n          <h2>{candidate.name}</h2>\n          <p>Votes: {candidate.votes}</p>\n          <button \n            onClick={() => handleVote(candidate.id)} \n            disabled={hasVoted}\n          >\n            Vote\n          </button>\n        </div>\n      ))}\n      \n      {hasVoted && (\n        <div className=\"message\">\n          <p>Thank you for voting!</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default VotingApp;\n```"
  },
  {
    id: 6,
    question: "Write a React component that changes the background color of a div when a button is clicked using useState.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction ColorChanger() {\n  const [backgroundColor, setBackgroundColor] = useState('white');\n  \n  const colors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange'];\n  \n  const changeColor = () => {\n    const randomColor = colors[Math.floor(Math.random() * colors.length)];\n    setBackgroundColor(randomColor);\n  };\n  \n  return (\n    <div className=\"color-changer\">\n      <h2>Background Color Changer</h2>\n      \n      <div \n        style={{\n          backgroundColor,\n          width: '200px',\n          height: '200px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          margin: '20px auto',\n          transition: 'background-color 0.3s ease'\n        }}\n      >\n        <p>Current color: {backgroundColor}</p>\n      </div>\n      \n      <button onClick={changeColor}>Change Color</button>\n    </div>\n  );\n}\n\nexport default ColorChanger;\n```"
  },
  {
    id: 7,
    question: "Create a list of products using map() in React. Each product should show name, price, and a \"Buy Now\" button.",
    answer: "```jsx\nimport React from 'react';\n\nfunction ProductList() {\n  const products = [\n    { id: 1, name: 'Laptop', price: 999.99 },\n    { id: 2, name: 'Smartphone', price: 699.99 },\n    { id: 3, name: 'Headphones', price: 149.99 },\n    { id: 4, name: 'Tablet', price: 399.99 },\n    { id: 5, name: 'Smartwatch', price: 249.99 }\n  ];\n  \n  const handleBuyNow = (productName) => {\n    alert('You are purchasing ' + productName + '!');\n  };\n  \n  return (\n    <div className=\"product-list\">\n      <h1>Our Products</h1>\n      \n      <div className=\"products\">\n        {products.map(product => (\n          <div key={product.id} className=\"product-card\">\n            <h2>{product.name}</h2>\n            <p className=\"price\">${product.price.toFixed(2)}</p>\n            <button \n              onClick={() => handleBuyNow(product.name)}\n              className=\"buy-button\"\n            >\n              Buy Now\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ProductList;\n```"
  },
  {
    id: 8,
    question: "Design a form in React with controlled components for Name and Email. Display the submitted data below the form.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction ContactForm() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: ''\n  });\n  \n  const [submitted, setSubmitted] = useState(false);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSubmitted(true);\n  };\n  \n  return (\n    <div className=\"contact-form\">\n      <h2>Contact Form</h2>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            required\n          />\n        </div>\n        \n        <button type=\"submit\">Submit</button>\n      </form>\n      \n      {submitted && (\n        <div className=\"submitted-data\">\n          <h3>Submitted Information:</h3>\n          <p><strong>Name:</strong> {formData.name}</p>\n          <p><strong>Email:</strong> {formData.email}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ContactForm;\n```"
  },
  {
    id: 9,
    question: "Use useEffect to display a message \"Component Mounted\" only once when the component loads.",
    answer: "```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction MountMessage() {\n  const [message, setMessage] = useState('');\n  \n  useEffect(() => {\n    // This code runs only once when the component mounts\n    setMessage('Component Mounted');\n    \n    console.log('Component has mounted');\n    \n    // Optional cleanup function\n    return () => {\n      console.log('Component will unmount');\n    };\n  }, []); // Empty dependency array ensures this runs only once\n  \n  return (\n    <div className=\"mount-message\">\n      <h2>Component Lifecycle Demo</h2>\n      <div className=\"message-box\">\n        {message && <p>{message}</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default MountMessage;\n```"
  },
  {
    id: 10,
    question: "Create a React component that shows the current URL path using useLocation.",
    answer: "```jsx\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nfunction CurrentPath() {\n  const location = useLocation();\n  \n  return (\n    <div className=\"current-path\">\n      <h2>Current URL Information</h2>\n      <div className=\"path-info\">\n        <p><strong>Current Path:</strong> {location.pathname}</p>\n        <p><strong>Search Parameters:</strong> {location.search || 'None'}</p>\n        <p><strong>Hash:</strong> {location.hash || 'None'}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentPath;\n\n// To use this component, make sure it's wrapped in a Router:\n// <BrowserRouter>\n//   <CurrentPath />\n// </BrowserRouter>\n```"
  },
  {
    id: 11,
    question: "Build a navigation bar using React Router with links for Home, About, and Contact components.",
    answer: "```jsx\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\n\n// Components for each route\nfunction Home() {\n  return <h2>Home Page</h2>;\n}\n\nfunction About() {\n  return <h2>About Us</h2>;\n}\n\nfunction Contact() {\n  return <h2>Contact Us</h2>;\n}\n\nfunction Navigation() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <nav className=\"navbar\">\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/contact\">Contact</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <div className=\"content\">\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/about\" element={<About />} />\n            <Route path=\"/contact\" element={<Contact />} />\n          </Routes>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default Navigation;\n```"
  },
  {
    id: 12,
    question: "Implement conditional rendering in React: if a user is logged in, show \"Welcome\", else show \"Please login\". Use useState to toggle login status.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction LoginStatus() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  \n  const toggleLogin = () => {\n    setIsLoggedIn(!isLoggedIn);\n  };\n  \n  return (\n    <div className=\"login-status\">\n      <h2>User Authentication Demo</h2>\n      \n      <div className=\"status-message\">\n        {isLoggedIn ? (\n          <p className=\"welcome-message\">Welcome! You are logged in.</p>\n        ) : (\n          <p className=\"login-message\">Please login to continue.</p>\n        )}\n      </div>\n      \n      <button onClick={toggleLogin}>\n        {isLoggedIn ? 'Logout' : 'Login'}\n      </button>\n    </div>\n  );\n}\n\nexport default LoginStatus;\n```"
  },
  {
    id: 13,
    question: "Create a counter component using useState and useEffect. The counter should increase automatically every second until it reaches 10.",
    answer: "```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction AutoCounter() {\n  const [count, setCount] = useState(0);\n  const [isRunning, setIsRunning] = useState(true);\n  \n  useEffect(() => {\n    let intervalId;\n    \n    if (isRunning && count < 10) {\n      intervalId = setInterval(() => {\n        setCount(prevCount => {\n          if (prevCount >= 9) {\n            setIsRunning(false);\n            return 10;\n          }\n          return prevCount + 1;\n        });\n      }, 1000);\n    }\n    \n    // Cleanup function to clear the interval when component unmounts\n    // or when dependencies change\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [count, isRunning]);\n  \n  const resetCounter = () => {\n    setCount(0);\n    setIsRunning(true);\n  };\n  \n  return (\n    <div className=\"auto-counter\">\n      <h2>Auto Counter</h2>\n      <div className=\"counter-display\">\n        <p>Count: {count}</p>\n        {count === 10 && <p>Counter reached maximum value!</p>}\n      </div>\n      {count === 10 && (\n        <button onClick={resetCounter}>Reset</button>\n      )}\n    </div>\n  );\n}\n\nexport default AutoCounter;\n```"
  },
  {
    id: 14,
    question: "Create a React component that accepts a list of students as props and displays only those who scored more than 50 marks.",
    answer: "```jsx\nimport React from 'react';\n\nfunction StudentList({ students }) {\n  // Filter students with scores > 50\n  const passingStudents = students.filter(student => student.score > 50);\n  \n  return (\n    <div className=\"student-list\">\n      <h2>Students with Scores > 50</h2>\n      \n      {passingStudents.length > 0 ? (\n        <ul className=\"students\">\n          {passingStudents.map(student => (\n            <li key={student.id} className=\"student-item\">\n              <p><strong>Name:</strong> {student.name}</p>\n              <p><strong>Score:</strong> {student.score}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No students found with scores above 50.</p>\n      )}\n    </div>\n  );\n}\n\n// Example usage\nfunction App() {\n  const studentData = [\n    { id: 1, name: 'Alice', score: 85 },\n    { id: 2, name: 'Bob', score: 42 },\n    { id: 3, name: 'Charlie', score: 70 },\n    { id: 4, name: 'David', score: 35 },\n    { id: 5, name: 'Eve', score: 92 }\n  ];\n  \n  return <StudentList students={studentData} />;\n}\n\nexport default StudentList;\n```"
  },
  {
    id: 15,
    question: "Design a simple React application with a button to toggle the visibility of a paragraph using useState.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction ToggleVisibility() {\n  const [isVisible, setIsVisible] = useState(false);\n  \n  const toggleVisibility = () => {\n    setIsVisible(!isVisible);\n  };\n  \n  return (\n    <div className=\"toggle-container\">\n      <h2>Toggle Visibility Demo</h2>\n      \n      <button onClick={toggleVisibility}>\n        {isVisible ? 'Hide Paragraph' : 'Show Paragraph'}\n      </button>\n      \n      {isVisible && (\n        <div className=\"content-box\">\n          <p>\n            This is a hidden paragraph that appears and disappears when you click the button.\n            It demonstrates how to use the useState hook to manage visibility state in React.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ToggleVisibility;\n```"
  },
  {
    id: 16,
    question: "Build a Todo List app in React where a user can add and delete tasks.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction TodoList() {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  \n  const handleInputChange = (e) => {\n    setNewTask(e.target.value);\n  };\n  \n  const addTask = () => {\n    if (newTask.trim() !== '') {\n      setTasks([...tasks, { id: Date.now(), text: newTask }]);\n      setNewTask('');\n    }\n  };\n  \n  const deleteTask = (taskId) => {\n    setTasks(tasks.filter(task => task.id !== taskId));\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addTask();\n  };\n  \n  return (\n    <div className=\"todo-list\">\n      <h2>Todo List</h2>\n      \n      <form onSubmit={handleSubmit} className=\"task-form\">\n        <input\n          type=\"text\"\n          value={newTask}\n          onChange={handleInputChange}\n          placeholder=\"Enter a new task\"\n        />\n        <button type=\"submit\">Add Task</button>\n      </form>\n      \n      <ul className=\"tasks\">\n        {tasks.length > 0 ? (\n          tasks.map(task => (\n            <li key={task.id} className=\"task-item\">\n              <span>{task.text}</span>\n              <button \n                onClick={() => deleteTask(task.id)}\n                className=\"delete-btn\"\n              >\n                Delete\n              </button>\n            </li>\n          ))\n        ) : (\n          <li className=\"empty-message\">No tasks yet. Add some!</li>\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default TodoList;\n```"
  },
  {
    id: 17,
    question: "Create a React component that fetches and displays a random joke using an API (e.g., https://official-joke-api.appspot.com/random_joke).",
    answer: "```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction RandomJoke() {\n  const [joke, setJoke] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  const fetchJoke = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch('https://official-joke-api.appspot.com/random_joke');\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      setJoke(data);\n      setLoading(false);\n    } catch (err) {\n      setError('Failed to fetch joke: ' + err.message);\n      setLoading(false);\n    }\n  };\n  \n  // Fetch a joke when the component mounts\n  useEffect(() => {\n    fetchJoke();\n  }, []);\n  \n  return (\n    <div className=\"joke-container\">\n      <h2>Random Joke Generator</h2>\n      \n      {loading && <p>Loading joke...</p>}\n      \n      {error && <p className=\"error\">{error}</p>}\n      \n      {joke && !loading && !error && (\n        <div className=\"joke\">\n          <p className=\"setup\">{joke.setup}</p>\n          <p className=\"punchline\">{joke.punchline}</p>\n        </div>\n      )}\n      \n      <button onClick={fetchJoke} disabled={loading}>\n        Get New Joke\n      </button>\n    </div>\n  );\n}\n\nexport default RandomJoke;\n```"
  },
  {
    id: 18,
    question: "Make a component that displays the current date and time and updates every second using useEffect.",
    answer: "```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Clock() {\n  const [date, setDate] = useState(new Date());\n  \n  useEffect(() => {\n    // Update the date every second\n    const timerId = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n    \n    // Clean up the interval when the component unmounts\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []); // Empty dependency array means this effect runs once on mount\n  \n  // Format the time as HH:MM:SS\n  const formatTime = (date) => {\n    return date.toLocaleTimeString();\n  };\n  \n  // Format the date as Day, Month Date, Year\n  const formatDate = (date) => {\n    return date.toLocaleDateString(undefined, {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n  \n  return (\n    <div className=\"clock\">\n      <h2>Current Time</h2>\n      <div className=\"time-display\">\n        <p className=\"time\">{formatTime(date)}</p>\n        <p className=\"date\">{formatDate(date)}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Clock;\n```"
  },
  {
    id: 19,
    question: "Create a product cart page using useState. When a user clicks \"Add to Cart\", the cart count should increase.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction ShoppingCart() {\n  const [cartItems, setCartItems] = useState([]);\n  \n  // Sample product data\n  const products = [\n    { id: 1, name: 'Laptop', price: 999.99, image: 'laptop.jpg' },\n    { id: 2, name: 'Smartphone', price: 699.99, image: 'smartphone.jpg' },\n    { id: 3, name: 'Headphones', price: 149.99, image: 'headphones.jpg' },\n    { id: 4, name: 'Tablet', price: 399.99, image: 'tablet.jpg' }\n  ];\n  \n  const addToCart = (product) => {\n    // Check if the product is already in the cart\n    const existingItem = cartItems.find(item => item.id === product.id);\n    \n    if (existingItem) {\n      // If it exists, increase the quantity\n      setCartItems(cartItems.map(item => \n        item.id === product.id \n          ? { ...item, quantity: item.quantity + 1 } \n          : item\n      ));\n    } else {\n      // If it doesn't exist, add it with quantity 1\n      setCartItems([...cartItems, { ...product, quantity: 1 }]);\n    }\n  };\n  \n  const removeFromCart = (productId) => {\n    setCartItems(cartItems.filter(item => item.id !== productId));\n  };\n  \n  // Calculate total number of items in cart\n  const cartCount = cartItems.reduce((total, item) => total + item.quantity, 0);\n  \n  // Calculate total price\n  const cartTotal = cartItems.reduce(\n    (total, item) => total + (item.price * item.quantity), \n    0\n  ).toFixed(2);\n  \n  return (\n    <div className=\"shopping-cart-page\">\n      <header className=\"cart-header\">\n        <h2>Shopping Cart</h2>\n        <div className=\"cart-summary\">\n          <span className=\"cart-count\">{cartCount} items</span>\n          <span className=\"cart-total\">${cartTotal}</span>\n        </div>\n      </header>\n      \n      <div className=\"product-grid\">\n        {products.map(product => (\n          <div key={product.id} className=\"product-card\">\n            <div className=\"product-image\">\n              {/* Placeholder for image */}\n              <div className=\"image-placeholder\">{product.name[0]}</div>\n            </div>\n            <h3>{product.name}</h3>\n            <p className=\"price\">${product.price.toFixed(2)}</p>\n            <button \n              onClick={() => addToCart(product)}\n              className=\"add-to-cart-btn\"\n            >\n              Add to Cart\n            </button>\n          </div>\n        ))}\n      </div>\n      \n      {cartItems.length > 0 && (\n        <div className=\"cart-items\">\n          <h3>Your Cart</h3>\n          <ul>\n            {cartItems.map(item => (\n              <li key={item.id} className=\"cart-item\">\n                <span className=\"item-name\">{item.name}</span>\n                <span className=\"item-quantity\">x{item.quantity}</span>\n                <span className=\"item-price\">\n                  ${(item.price * item.quantity).toFixed(2)}\n                </span>\n                <button \n                  onClick={() => removeFromCart(item.id)}\n                  className=\"remove-btn\"\n                >\n                  Remove\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ShoppingCart;\n```"
  },
  {
    id: 20,
    question: "Create a simple feedback form with fields like Name, Email, and Feedback message. Show a confirmation message on submit.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction FeedbackForm() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: '',\n    rating: 5\n  });\n  \n  const [submitted, setSubmitted] = useState(false);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // In a real app, you would send this data to a server\n    console.log('Form submitted:', formData);\n    setSubmitted(true);\n  };\n  \n  const handleNewFeedback = () => {\n    setFormData({\n      name: '',\n      email: '',\n      message: '',\n      rating: 5\n    });\n    setSubmitted(false);\n  };\n  \n  if (submitted) {\n    return (\n      <div className=\"feedback-confirmation\">\n        <h2>Thank You for Your Feedback!</h2>\n        <p>We appreciate you taking the time to share your thoughts with us.</p>\n        <div className=\"submission-details\">\n          <p><strong>Name:</strong> {formData.name}</p>\n          <p><strong>Email:</strong> {formData.email}</p>\n          <p><strong>Rating:</strong> {formData.rating}/5</p>\n          <p><strong>Message:</strong> {formData.message}</p>\n        </div>\n        <button onClick={handleNewFeedback}>Submit Another Feedback</button>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"feedback-form\">\n      <h2>Feedback Form</h2>\n      <p>We value your feedback! Please fill out the form below:</p>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"rating\">Rating (1-5):</label>\n          <select\n            id=\"rating\"\n            name=\"rating\"\n            value={formData.rating}\n            onChange={handleChange}\n          >\n            <option value=\"1\">1 - Poor</option>\n            <option value=\"2\">2 - Fair</option>\n            <option value=\"3\">3 - Good</option>\n            <option value=\"4\">4 - Very Good</option>\n            <option value=\"5\">5 - Excellent</option>\n          </select>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"message\">Feedback Message:</label>\n          <textarea\n            id=\"message\"\n            name=\"message\"\n            value={formData.message}\n            onChange={handleChange}\n            rows=\"5\"\n            required\n          ></textarea>\n        </div>\n        \n        <button type=\"submit\">Submit Feedback</button>\n      </form>\n    </div>\n  );\n}\n\nexport default FeedbackForm;\n```"
  },
  {
    id: 21,
    question: "Implement a dropdown list in React with countries. When a country is selected, display its name below.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction CountrySelector() {\n  const [selectedCountry, setSelectedCountry] = useState('');\n  \n  // List of countries\n  const countries = [\n    { code: 'us', name: 'United States' },\n    { code: 'ca', name: 'Canada' },\n    { code: 'uk', name: 'United Kingdom' },\n    { code: 'au', name: 'Australia' },\n    { code: 'de', name: 'Germany' },\n    { code: 'fr', name: 'France' },\n    { code: 'jp', name: 'Japan' },\n    { code: 'in', name: 'India' },\n    { code: 'br', name: 'Brazil' },\n    { code: 'za', name: 'South Africa' }\n  ];\n  \n  const handleChange = (e) => {\n    setSelectedCountry(e.target.value);\n  };\n  \n  return (\n    <div className=\"country-selector\">\n      <h2>Country Selector</h2>\n      \n      <div className=\"selector-container\">\n        <label htmlFor=\"country\">Select a country:</label>\n        <select\n          id=\"country\"\n          value={selectedCountry}\n          onChange={handleChange}\n        >\n          <option value=\"\">-- Select Country --</option>\n          {countries.map(country => (\n            <option key={country.code} value={country.name}>\n              {country.name}\n            </option>\n          ))}\n        </select>\n      </div>\n      \n      {selectedCountry && (\n        <div className=\"selected-country\">\n          <h3>Selected Country:</h3>\n          <p>{selectedCountry}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default CountrySelector;\n```"
  },
  {
    id: 22,
    question: "Build a temperature converter (Celsius to Fahrenheit) using React with controlled input fields.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction TemperatureConverter() {\n  const [celsius, setCelsius] = useState('');\n  const [fahrenheit, setFahrenheit] = useState('');\n  \n  const handleCelsiusChange = (e) => {\n    const value = e.target.value;\n    setCelsius(value);\n    \n    // Convert to Fahrenheit if the input is a valid number\n    if (value !== '') {\n      const celsiusFloat = parseFloat(value);\n      const fahrenheitValue = (celsiusFloat * 9/5) + 32;\n      setFahrenheit(fahrenheitValue.toFixed(2));\n    } else {\n      setFahrenheit('');\n    }\n  };\n  \n  const handleFahrenheitChange = (e) => {\n    const value = e.target.value;\n    setFahrenheit(value);\n    \n    // Convert to Celsius if the input is a valid number\n    if (value !== '') {\n      const fahrenheitFloat = parseFloat(value);\n      const celsiusValue = (fahrenheitFloat - 32) * 5/9;\n      setCelsius(celsiusValue.toFixed(2));\n    } else {\n      setCelsius('');\n    }\n  };\n  \n  return (\n    <div className=\"temperature-converter\">\n      <h2>Temperature Converter</h2>\n      \n      <div className=\"converter-container\">\n        <div className=\"input-group\">\n          <label htmlFor=\"celsius\">Celsius (°C):</label>\n          <input\n            type=\"number\"\n            id=\"celsius\"\n            value={celsius}\n            onChange={handleCelsiusChange}\n            placeholder=\"Enter temperature in Celsius\"\n          />\n        </div>\n        \n        <div className=\"equals-sign\">=</div>\n        \n        <div className=\"input-group\">\n          <label htmlFor=\"fahrenheit\">Fahrenheit (°F):</label>\n          <input\n            type=\"number\"\n            id=\"fahrenheit\"\n            value={fahrenheit}\n            onChange={handleFahrenheitChange}\n            placeholder=\"Enter temperature in Fahrenheit\"\n          />\n        </div>\n      </div>\n      \n      <div className=\"formula-info\">\n        <h3>Conversion Formulas:</h3>\n        <p>Celsius to Fahrenheit: (°C × 9/5) + 32 = °F</p>\n        <p>Fahrenheit to Celsius: (°F − 32) × 5/9 = °C</p>\n      </div>\n    </div>\n  );\n}\n\nexport default TemperatureConverter;\n```"
  },
  {
    id: 23,
    question: "Create a React app that allows users to like or dislike a post. Display total likes and dislikes.",
    answer: "```jsx\nimport React, { useState } from 'react';\n\nfunction PostRating() {\n  const [likes, setLikes] = useState(0);\n  const [dislikes, setDislikes] = useState(0);\n  const [userVote, setUserVote] = useState(null); // null, 'like', or 'dislike'\n  \n  const handleLike = () => {\n    if (userVote === 'like') {\n      // User is un-liking\n      setLikes(likes - 1);\n      setUserVote(null);\n    } else {\n      // User is liking\n      if (userVote === 'dislike') {\n        // If previously disliked, remove the dislike\n        setDislikes(dislikes - 1);\n      }\n      setLikes(likes + 1);\n      setUserVote('like');\n    }\n  };\n  \n  const handleDislike = () => {\n    if (userVote === 'dislike') {\n      // User is un-disliking\n      setDislikes(dislikes - 1);\n      setUserVote(null);\n    } else {\n      // User is disliking\n      if (userVote === 'like') {\n        // If previously liked, remove the like\n        setLikes(likes - 1);\n      }\n      setDislikes(dislikes + 1);\n      setUserVote('dislike');\n    }\n  };\n  \n  return (\n    <div className=\"post-rating\">\n      <div className=\"post-content\">\n        <h2>Sample Post</h2>\n        <p>\n          This is a sample post content. You can like or dislike this post using the buttons below.\n          This demonstrates how to implement a simple rating system in React using useState.\n        </p>\n      </div>\n      \n      <div className=\"rating-controls\">\n        <div className=\"rating-stats\">\n          <span className=\"likes-count\">{likes} Likes</span>\n          <span className=\"dislikes-count\">{dislikes} Dislikes</span>\n        </div>\n        \n        <div className=\"rating-buttons\">\n          <button \n            onClick={handleLike}\n            className={`like-button ${userVote === 'like' ? 'active' : ''}`}\n          >\n            👍 Like\n          </button>\n          \n          <button \n            onClick={handleDislike}\n            className={`dislike-button ${userVote === 'dislike' ? 'active' : ''}`}\n          >\n            👎 Dislike\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PostRating;\n```"
  }
];

export default questionsData;